name: Deploy to Production Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  SERVER_HOST: 188.166.199.218
  SERVER_USER: root
  DEPLOY_PATH: /home/locallytrip
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          web/package-lock.json
          web-admin/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install web dependencies  
      run: |
        cd web
        npm ci
        
    - name: Install admin dependencies
      run: |
        cd web-admin
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No tests found"
        
    - name: Run web tests
      run: |
        cd web
        npm run lint || echo "No lint configured"
        
    - name: Run admin tests
      run: |
        cd web-admin
        npm run lint || echo "No lint configured"

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: success() || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker builds
      run: |
        # Test backend build
        docker build -t locallytrip-backend:test --target production ./backend
        
        # Test web build  
        docker build -t locallytrip-web:test --target production ./web
        
        # Test admin build
        docker build -t locallytrip-admin:test --target production ./web-admin
        
    - name: Clean up test images
      run: |
        docker rmi locallytrip-backend:test locallytrip-web:test locallytrip-admin:test || true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: success() || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "🚀 Starting deployment process..."
          
          # Navigate to deployment directory
          cd ${{ env.DEPLOY_PATH }}
          
          # Check if deployment script exists
          if [[ ! -f "deploy-production-complete.sh" ]]; then
            echo "❌ Deployment script not found!"
            exit 1
          fi
          
          # Stop services gracefully
          echo "🛑 Stopping services..."
          docker-compose -f docker-compose.prod.ssl.yml down || true
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          git pull origin main
          
          # Set proper permissions
          chmod +x deploy-production-complete.sh
          
          # Run deployment (skip some steps as they're already done)
          echo "🚀 Running deployment..."
          
          # Load environment
          if [[ -f ".env.production" ]]; then
            export $(cat .env.production | grep -v '^#' | xargs)
          fi
          
          # Build and start services
          echo "🔨 Building and starting services..."
          docker-compose -f docker-compose.prod.ssl.yml build --no-cache
          docker-compose -f docker-compose.prod.ssl.yml up -d
          
          # Wait for services
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Check health
          echo "🏥 Checking service health..."
          docker-compose -f docker-compose.prod.ssl.yml ps
          
          # Test endpoints
          echo "🧪 Testing endpoints..."
          
          # Test main site
          if curl -I -s --max-time 10 "https://locallytrip.com" | head -1 | grep -q "200\|301\|302"; then
            echo "✅ Main site is responding"
          else
            echo "⚠️ Main site may have issues"
          fi
          
          # Test API
          if curl -s --max-time 10 "https://api.locallytrip.com/health" | grep -q "healthy\|pong"; then
            echo "✅ API is healthy"
          else
            echo "⚠️ API may have issues"
          fi
          
          # Test admin
          if curl -I -s --max-time 10 "https://admin.locallytrip.com" | head -1 | grep -q "200\|301\|302"; then
            echo "✅ Admin site is responding"
          else
            echo "⚠️ Admin site may have issues"
          fi
          
          echo "🎉 Deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      run: |
        # Wait a bit more for services to fully start
        sleep 10
        
        # Test main endpoints
        echo "🧪 Final verification..."
        
        # Check if sites are responding
        curl -I --max-time 15 https://locallytrip.com || echo "Main site check failed"
        curl -I --max-time 15 https://admin.locallytrip.com || echo "Admin site check failed" 
        curl -s --max-time 15 https://api.locallytrip.com/health || echo "API health check failed"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ Deployment completed successfully!"
          echo "🌐 Website: https://locallytrip.com"
          echo "🔧 Admin: https://admin.locallytrip.com" 
          echo "🔌 API: https://api.locallytrip.com"
        else
          echo "❌ Deployment failed!"
        fi
