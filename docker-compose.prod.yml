version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: locallytrip-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl/cert.pem:/etc/ssl/certs/cert.pem:ro
      - ./ssl/key.pem:/etc/ssl/private/key.pem:ro
      - nginx_logs:/var/log/nginx
      - nginx_certbot:/var/www/certbot:ro
    depends_on:
      backend:
        condition: service_healthy
      web:
        condition: service_healthy
      web-admin:
        condition: service_healthy
    networks:
      - locallytrip-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: locallytrip-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"  # Only localhost access
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/db/seed:/docker-entrypoint-initdb.d:ro
    networks:
      - locallytrip-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: locallytrip-backend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      # Email configuration
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
    volumes:
      - ./backend/public/images:/app/public/images
      - ./backend/public/uploads:/app/public/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - locallytrip-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://0.0.0.0:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_IMAGES: ${NEXT_PUBLIC_IMAGES}
        NEXT_PUBLIC_WEBSITE_URL: ${NEXT_PUBLIC_WEBSITE_URL}
    container_name: locallytrip-web-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_IMAGES: ${NEXT_PUBLIC_IMAGES}
      NEXT_PUBLIC_WEBSITE_URL: ${NEXT_PUBLIC_WEBSITE_URL}
      INTERNAL_API_URL: ${INTERNAL_API_URL}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - locallytrip-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Admin Dashboard
  web-admin:
    build:
      context: ./web-admin
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_IMAGES: ${NEXT_PUBLIC_IMAGES}
    container_name: locallytrip-admin-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_IMAGES: ${NEXT_PUBLIC_IMAGES}
      INTERNAL_API_URL: ${INTERNAL_API_URL}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - locallytrip-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data_prod:
    driver: local
  nginx_logs:
    driver: local
  nginx_certbot:
    driver: local
  backend_logs:
    driver: local

networks:
  locallytrip-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
